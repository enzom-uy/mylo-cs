generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Map {
    name String @id
    Nade Nade[]
}

model Nade {
    id             String      @id @default(cuid())
    description    String?     @db.Text
    status         Nade_status @default(PENDING)
    video_url      String      @unique
    title          String      @db.Text
    created_at     DateTime    @default(now())
    server_id      String?
    author         User        @relation(fields: [user_id], references: [id])
    map            Map         @relation(fields: [map_name], references: [name])
    nade_type      NadeType    @relation(fields: [nade_type_name], references: [name])
    nade_type_name String
    map_name       String
    user_id        String

    @@index([server_id])
    @@index([nade_type_name])
    @@index([map_name])
    @@index([user_id])
}

model NadeType {
    name String @id
    Nade Nade[]
}

model Server {
    id   String @id
    name String
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String  @unique
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Nade          Nade[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Nade_status {
    APPROVED
    PENDING
    DECLINED
}
