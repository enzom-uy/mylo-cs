generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model NadeType {
    name  String @id
    nades Nade[]
}

model Map {
    name String @id
    Nade Nade[]
}

model Report {
    id            String      @id @default(cuid())
    report_type   Report_Type
    reason        String      @db.LongText
    author        User        @relation(fields: [author_id], references: [id], name: "reports_created")
    author_id     String
    reported_nade Nade?       @relation(name: "reported_nade", fields: [nadeId], references: [id])
    reported_user User?       @relation(name: "reports_received", fields: [userId], references: [id])
    nadeId        String?
    userId        String?

    @@index([author_id])
    @@index([userId])
    @@index([nadeId])
}

model Nade {
    id             String      @id @default(cuid())
    description    String?     @db.Text
    status         Nade_status @default(PENDING)
    video_url      String      @unique
    title          String      @db.Text
    created_at     DateTime    @default(now())
    author         User        @relation(fields: [user_id], references: [id])
    map            Map         @relation(fields: [map_name], references: [name])
    nade_type      NadeType    @relation(fields: [nade_type_name], references: [name])
    nade_type_name String
    map_name       String
    user_id        String
    server         Server?     @relation(fields: [server_id], references: [id])
    server_id      String?
    Report         Report[]    @relation(name: "reported_nade")

    @@index([nade_type_name])
    @@index([map_name])
    @@index([user_id])
    @@index([server_id])
}

model Server {
    id       String @id
    name     String
    owner    User   @relation(fields: [owner_id], references: [id])
    owner_id String
    admins   User[] @relation(name: "admins")
    members  User[] @relation(name: "members")
    nades    Nade[]

    @@index([owner_id])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String  @unique
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                 String    @id @default(cuid())
    name               String
    email              String?   @unique
    emailVerified      DateTime?
    image              String?
    accounts           Account[]
    sessions           Session[]
    nades              Nade[]
    servers_owned      Server[]
    servers_with_admin Server[]  @relation(name: "admins")
    servers_member_of  Server[]  @relation(name: "members")
    reports_created    Report[]  @relation(name: "reports_created")
    reports_received   Report[]  @relation(name: "reports_received")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Nade_status {
    APPROVED
    PENDING
    DECLINED
}

enum Report_Type {
    MAP
    USER
}
