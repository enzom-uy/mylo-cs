generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model NadeType {
    name  String @id
    nades Nade[]
}

model Map {
    name  String @id
    nades Nade[]
}

model Nade {
    id             String      @id @default(cuid())
    description    String?     @db.Text
    status         Nade_status @default(PENDING)
    video_url      String      @unique
    title          String      @db.Text
    created_at     DateTime    @default(now())
    nade_type_name String
    map_name       String
    user_id        String
    server_id      String?
    author         User        @relation(fields: [user_id], references: [id])
    map            Map         @relation(fields: [map_name], references: [name])
    nade_type      NadeType    @relation(fields: [nade_type_name], references: [name])
    Server         Server?     @relation(fields: [server_id], references: [id])

    @@index([nade_type_name])
    @@index([map_name])
    @@index([user_id])
    @@index([server_id])
}

model Report {
    id                 String      @id @default(cuid())
    author             User        @relation(fields: [author_id], references: [id])
    author_id          String
    type               Report_Type
    reported_user      User?       @relation(fields: [reported_user_id], references: [id], name: "ReportsReceived")
    reported_user_id   String?
    reported_server    Server?     @relation(fields: [reported_server_id], references: [id])
    reported_server_id String?

    @@index([author_id])
    @@index([reported_user_id])
    @@index([reported_server_id])
}

model Server {
    id               String           @id
    name             String
    description      String?          @db.Text
    server_icon      String?
    members          User[]           @relation("ServerMembers")
    admins           User[]
    UserServerRole   UserServerRole[]
    nades            Nade[]
    reports_received Report[]
}

model ServerRole {
    name  Server_Role @id
    users User[]
}

model UserServerRole {
    id        String      @id @default(cuid())
    user_id   String
    server_id String
    role      Server_Role
    user      User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
    server    Server      @relation(fields: [server_id], references: [id], onDelete: Cascade)

    @@index([user_id])
    @@index([server_id])
}

model User {
    id                String           @id @default(cuid())
    name              String
    email             String?          @unique
    emailVerified     DateTime?
    image             String?
    accounts          Account[]
    sessions          Session[]
    nades             Nade[]
    servers_is_member Server[]         @relation("ServerMembers")
    servers_is_admin  Server[]
    roles             ServerRole[]
    user_server_role  UserServerRole[]
    reports_made      Report[]
    reports_received  Report[]         @relation("ReportsReceived")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Nade_status {
    APPROVED
    PENDING
}

enum Server_Role {
    OWNER
    ADMIN
    USER
}

enum Report_Type {
    USER
    NADE
    SERVER
}
